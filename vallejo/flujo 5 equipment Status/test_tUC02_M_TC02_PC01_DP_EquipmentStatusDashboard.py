# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
import sys,os

p = os.path.abspath('../..')
sys.path.insert(1, p)
from externalLibraries import convertTo
import sys,os
p = os.path.abspath('..')
sys.path.insert(1, p)
from utilities.ligasPlanta import LIGAPRINCIPAL


class TestTC02MPC04DPEntitySelectionleftslider():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_tC02MPC04DPEntitySelectionleftslider(self):
    # Test name: TC02_M_PC04_DP_Entity Selection left slider
    # 1 | open | https://09384038:ARbg95917284.@meswebgsftmexicali.azure.intra.pepsico.com/Thingworx/Runtime/index.html#master=PepsiCo_Master&mashup=MES_Dashboard&__applyThemeName=PepsiCo%20Default%20Theme&_refreshTS=1670527225809 | 
    self.driver.get(LIGAPRINCIPAL)
    # 2 | waitForElementPresent | xpath=//div[@id='root_pagemashupcontainer-6_ContainedMashup-13_ContainedMashup-75_mashupcontainer-5_gridadvanced-109-bounding-box']/div[3] | 11000
    # WebDriverWait(self.driver, 100).until(expected_conditions.presence_of_element_located((By.XPATH, "//div[@id=\'root_pagemashupcontainer-6_ContainedMashup-13_ContainedMashup-75_mashupcontainer-5_gridadvanced-109-bounding-box\']/div[3]")))
    time.sleep(25)
    # 3 | click | xpath=//div[@id='root_pagemashupcontainer-6_flexcontainer-200-bounding-box']/div[2] | 
    self.driver.find_element(By.XPATH, "//div[@id=\'root_pagemashupcontainer-6_flexcontainer-200-bounding-box\']/div[2]").click()
    time.sleep(7)
    # 4 | click | xpath=//div[@id='root_pagemashupcontainer-6_ContainedMashup-105_ptcsdropdown-100-bounding-box']/ptcs-dropdown | 
    self.driver.find_element(By.XPATH, "/html[1]/body[1]/div[1]/div[3]/div[1]/div[2]/div[1]/div[1]/div[2]/div[1]/div[2]/div[1]/div[2]/div[1]/div[1]/div[1]/div[1]/div[2]/div[1]/div[3]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/div[1]/div[3]/div[1]/div[2]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/div[4]/ptcs-dropdown[1]").click()
    time.sleep(7)
    # 5 | click | xpath=//body[@id='runtime']/ptcs-list | 
    jsPathPotato='document.querySelector("#root_pagemashupcontainer-6_ContainedMashup-105_ptcsdropdown-100-external-wc").shadowRoot.querySelector("#chunker > div > div > ptcs-list-item:nth-child(4) > ptcs-div")'
    self.driver.execute_script(f"return {jsPathPotato}").click()
    # 7 | assertElementPresent | id=root_pagemashupcontainer-6_ContainedMashup-105_ptcsdropdown-100 | 
    time.sleep(8)
        # 6 | click | xpath=//div[@id='cell_PlantModelSelectionForNavigation_RepeaterButton-12_ptcsbutton-43-bounding-box']/ptcs-button | 
    self.driver.find_element(By.XPATH, "/html/body/div[1]/div[3]/div/div[2]/div/div/div[2]/div/div[2]/div[1]/div[2]/div[1]/div[1]/div[1]/div/div[2]/div/div[3]/div/div/div[2]/div/div[1]/div[1]/div/div[3]/div/div[2]/div/div/div[2]/div/div[3]/div/div[2]/div/div/div[3]/div/div[1]/div/div[2]/div/div/div[2]/div/div[3]/div/div/ptcs-button").click()
    time.sleep(20)
    # 10 | assertElementPresent | xpath=//div[@id='root_pagemashupcontainer-6_ContainedMashup-13_ContainedMashup-75_flexcontainer-4-bounding-box']/div | 
    # click en el dropdown de dash boards del navbar
    self.driver.find_element(By.XPATH,'//body[1]/div[1]/div[3]/div[1]/div[2]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/div[1]/div[1]/ul[1]/li[4]/table[1]/tbody[1]/tr[1]/td[1]/div[1]').click()
    time.sleep(4)
    # ----------------------
    # 11 click en equipment status li
    self.driver.find_element(By.XPATH,'/html/body/ul[2]/li[3]/table/tbody/tr/td/div/a').click()
    time.sleep(35)
    

    # 12 defino matriz de errores
    errores=[["Linea","Tubo","Equipo","Tipo de Equipo"]]

    # 13 recorro la tabla en busca del equipo que no esta en funcionamiento (ROJO)
    TABLEPATH="/html/body/div[1]/div[3]/div/div[2]/div/div/div[2]/div/div[2]/div[1]/div[2]/div[1]/div[1]/div[1]/div/div[2]/div/div[3]/div/div/div[2]/div/div[2]/div[1]/div/div[3]/div/div[2]/div/div/div[2]/div/div[1]/div/div/div/div[2]/div[1]/div/div/div/div[3]/div[2]/div[2]/table/tbody"
    TABLEPATHENUNC='/html[1]/body[1]/div[3]/div[3]/div[1]/div[2]/div[1]/div[1]/div[2]/div[1]/div[2]/div[1]/div[2]/div[1]/div[1]/div[1]/div[1]/div[2]/div[1]/div[3]/div[1]/div[1]/div[2]/div[1]/div[2]/div[1]/div[1]/div[3]/div[1]/div[2]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/div[1]/div[3]/div[2]/div[1]/table[1]/tbody[1]'
    filas=self.driver.find_elements(By.XPATH,TABLEPATH+'/tr')
    columnas=self.driver.find_elements(By.XPATH,TABLEPATH+'/tr[2]/td')
    filas=len(filas)
    columnas=len(columnas)

    # contador de equipos que no estan en funcionamiento
    equiposNoFuncionando=0
    # contador de equipos que funcionan correctamente
    equiposFuncionando=0
  
    equipoClasemsg=""
    for f in range(2,filas+1):
      #bandera que indica si el equipo no esta en funcionamiento
      equipoNoFuncionando=False
      # obtengo los datos de la fila
      departamento=self.driver.find_element(By.XPATH,TABLEPATH+'/tr['+str(f)+']/td[1]').text
      linea=self.driver.find_element(By.XPATH,TABLEPATH+'/tr['+str(f)+']/td[2]').text
      tubo=self.driver.find_element(By.XPATH,TABLEPATH+'/tr['+str(f)+']/td[3]').text
      # recorro las columnas de la fila
      print("departamento: "+departamento+" linea: "+linea+" tubo: "+tubo)
      for c in range(1, columnas+1):
        # obtengo el nombre del equipo y su clase
        equipo=self.driver.find_element(By.XPATH,TABLEPATH+'/tr['+str(f)+']/td['+str(c)+']')
        nombreEquipo=self.driver.find_element(By.XPATH,TABLEPATH+'/tr['+str(f)+']/td['+str(c)+']').text
        equipoClase=equipo.get_attribute("class")
        equipoClasemsg+=equipoClase
        # tipoEquipo=self.driver.find_element(By.XPATH,TABLEPATHENUNC+"/tr[2]/td["+str(c)+"]/div[1]").text
        # evalua cual es la clase del css para determinar de que color es la celda del equipo, si es rojo es porque no esta funcionando
        # esta establecido que ese nombre e clase es el de los equipos que no estan funcionando
        # OJO hay celdas fantasmas que estan en rojo pero que no corresponden a nada y no tienen texto por eso la comprobacion de que si tienen un len>3
        if equipoClase=="twdhtmlxcell cell_style3" and len(nombreEquipo)>3:
            # errores+=f'El equipo {nombreEquipo} del departamento {departamento} linea: {linea} tubo: {tubo} esta fallando \n'
            errores.append([linea,tubo,nombreEquipo])
            equipoNoFuncionando=True
        if c>20:
          # si el equipo no esta funcionando aumento el contador de equipos que no funcionan      
          if equipoNoFuncionando:
            equiposNoFuncionando+=1
          else:
            # si el equipo esta funcionando aumento el contador de equipos que funcionan
            equiposFuncionando+=1
            
      equipoClasemsg+="\n"

    print(equipoClasemsg)

    # Comprobar si hay errores
    if len(errores)>5:
        name=convertTo.createWord(errores, 'TC03MPC02DPEfficiencyCapacityWasteandDowntimevalues',equiposNoFuncionando,equiposFuncionando)
        convertTo.convertToPdf(name)
        assert len(errores)<5, '\n'+errores
    else:
        assert len(errores)<5, '\n'+errores


if __name__=='__main__':
  pytest.main()