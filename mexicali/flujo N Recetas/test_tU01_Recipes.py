# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
import sys,os

p = os.path.abspath('../..')
sys.path.insert(1, p)
from externalLibraries import convertTo

p = os.path.abspath('..')
sys.path.insert(1, p)
from utilities.ligasPlanta import LIGAPRINCIPAL


class TestTC01Recipes():
  def setup_method(self, method):
    ChromeoOptions = webdriver.ChromeOptions()
    ChromeoOptions.add_argument('--ignore-certificate-errors')
    ChromeoOptions.add_argument('--ignore-ssl-errors')
    ChromeoOptions.add_argument("--start-maximized")
    ChromeoOptions.add_argument("--disable-extensions")
    ChromeoOptions.add_argument("--disable-gpu")
    ChromeoOptions.add_argument("--disable-dev-shm-usage")
    ChromeoOptions.add_argument("--no-sandbox")


    self.driver = webdriver.Chrome(options=ChromeoOptions)
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_tC01Recipes(self):
    # Test name: TC02_M_PC04_DP_Entity Selection left slider
    # 1 | open | https://09384038:ARbg95917284.@meswebgsftmexicali.azure.intra.pepsico.com/Thingworx/Runtime/index.html#master=PepsiCo_Master&mashup=MES_Dashboard&__applyThemeName=PepsiCo%20Default%20Theme&_refreshTS=1670527225809 | 
    self.driver.get(LIGAPRINCIPAL)
    # 2 | waitForElementPresent | xpath=//div[@id='root_pagemashupcontainer-6_ContainedMashup-13_ContainedMashup-75_mashupcontainer-5_gridadvanced-109-bounding-box']/div[3] | 11000
    # WebDriverWait(self.driver, 100).until(expected_conditions.presence_of_element_located((By.XPATH, "//div[@id=\'root_pagemashupcontainer-6_ContainedMashup-13_ContainedMashup-75_mashupcontainer-5_gridadvanced-109-bounding-box\']/div[3]")))
    time.sleep(10)
    # # 3 | click | xpath=//div[@id='root_pagemashupcontainer-6_flexcontainer-200-bounding-box']/div[2] | 
    # self.driver.find_element(By.XPATH, "//div[@id=\'root_pagemashupcontainer-6_flexcontainer-200-bounding-box\']/div[2]").click()
    # time.sleep(3)
    # # 4 | click | xpath=//div[@id='root_pagemashupcontainer-6_ContainedMashup-105_ptcsdropdown-100-bounding-box']/ptcs-dropdown | 
    # self.driver.find_element(By.XPATH, "/html[1]/body[1]/div[1]/div[3]/div[1]/div[2]/div[1]/div[1]/div[2]/div[1]/div[2]/div[1]/div[2]/div[1]/div[1]/div[1]/div[1]/div[2]/div[1]/div[3]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/div[1]/div[3]/div[1]/div[2]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/div[4]/ptcs-dropdown[1]").click()
    # time.sleep(6)
    # # 5 | click | xpath=//body[@id='runtime']/ptcs-list | 
    # jsPathPotato='document.querySelector("#root_pagemashupcontainer-6_ContainedMashup-105_ptcsdropdown-100-external-wc").shadowRoot.querySelector("#chunker > div > div > ptcs-list-item:nth-child(1) > ptcs-div")'
    # self.driver.execute_script(f"return {jsPathPotato}").click()
    # # 7 | assertElementPresent | id=root_pagemashupcontainer-6_ContainedMashup-105_ptcsdropdown-100 | 
    # time.sleep(3)
    #     # 6 | click | xpath=//div[@id='cell_PlantModelSelectionForNavigation_RepeaterButton-12_ptcsbutton-43-bounding-box']/ptcs-button | 
    # self.driver.find_element(By.XPATH, "/html/body/div[1]/div[3]/div/div[2]/div/div/div[2]/div/div[2]/div[1]/div[2]/div[1]/div[1]/div[1]/div/div[2]/div/div[3]/div/div/div[2]/div/div[1]/div[1]/div/div[3]/div/div[2]/div/div/div[2]/div/div[3]/div/div[2]/div/div/div[3]/div/div[1]/div/div[2]/div/div/div[2]/div/div[3]/div/div/ptcs-button").click()
    # time.sleep(7)
    # 10 | assertElementPresent | xpath=//div[@id='root_pagemashupcontainer-6_ContainedMashup-13_ContainedMashup-75_flexcontainer-4-bounding-box']/div | 
    # click en el dropdown de reportes
    self.driver.find_element(By.XPATH,'/html/body/div[1]/div[3]/div/div[2]/div/div/div[2]/div/div[1]/div/div[2]/div/div/div/div/div/ul/li[2]/table/tbody/tr/td/div/a/span').click()
    time.sleep(2)
    # ----------------------
    # 11 click en Recetas incompletas li
    self.driver.find_element(By.XPATH,'/html/body/ul[2]/li[5]/table/tbody/tr/td/div/a/span').click()
    time.sleep(5)
    
    # 12 busco cuantos elementos tengo el el drop down de recetas por su js path
    jsDropdown='document.querySelector("#root_pagemashupcontainer-6_ptcsdropdown-49").shadowRoot.querySelector("#select")'
    # 13 hago click en el dropdown
    self.driver.execute_script(f"return {jsDropdown}").click()
    time.sleep(2)
    # 13 obtengo el numero de elementos
    itemDropdown='document.querySelectorAll("#root_pagemashupcontainer-6_ptcsdropdown-49-external-wc").shadowRoot.querySelector("#chunker > div > div > ptcs-list-item:nth-child(1) ")'
    numElemDropdown=self.driver.execute_script(f"return {itemDropdown}")
    print(numElemDropdown)
    # Comprobar si hay errores
    # if len(errores)>5:
    #     # name=convertTo.createWord(errores, 'TC03MPC02DPEfficiencyCapacityWasteandDowntimevalues',equiposNoFuncionando,equiposFuncionando)
    #     # convertTo.convertToPdf(name)
    #     # buscar el path de la carpeta donde se encuentra el archivo

    #     path = os.path.dirname(os.path.abspath(__file__))

    #     # creo el path del archivo

    #     path = path + "\tables\TC03MPC02DPEfficien.xlsx"
        
    #     convertTo.createExcel(equiposM,errores,tiposEquipo,path)
    #     assert len(errores)<1, errores
    # else:
    #     assert len(errores)<1, errores


if __name__=='__main__':
  pytest.main()