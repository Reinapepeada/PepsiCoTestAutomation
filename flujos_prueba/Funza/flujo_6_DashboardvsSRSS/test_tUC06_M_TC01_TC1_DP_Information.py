# Generated by Selenium IDE
import pytest
import docx 
from docx import Document
from docx.shared import Inches
from docx.shared import Pt
from docx.shared import Cm
from docxtpl import DocxTemplate, InlineImage
import os,sys
import win32com.client
p = os.path.abspath('../..')
sys.path.insert(1, p)
from externalLibraries import convertTo
import math
import time
import json
from selenium import webdriver
p = os.path.abspath('')
sys.path.insert(1, p)

class TestTC02MPC04DPEntitySelectionleftslider():
  def setup_method(self, method):
    chrome_options=webdriver.ChromeOptions()
    chrome_options.add_argument("--disable-logging")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--log-level=3")
    chrome_options.add_argument("--disable-popup-blocking")
    #desactiva certificados de seguridad
    chrome_options.add_argument('--ignore-certificate-errors')

    self.driver = webdriver.Chrome( options=chrome_options)
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_tC02MPC04DPEntitySelectionleftslider(self):
    # abrimos el archivo csv del dashboard para obtener los datos
    with open('tables/dashboardPepsiWeek.csv', 'rt') as f:
        #abrimos el SRSS csv de la pepsi week para leerlo y compararlo
        with open('tables/pepsiWeekSRSS.csv', 'rt') as f2:
        #recorremos el csv del dashboard para guardar los datos a comparar
            LineasDashboard=f.readlines()
            LineasSRSS=f2.readlines()
            #variable que contiene los errores
            errores="\n"
            for line in range(3,len(LineasDashboard)):
                #vaciamos variable mensaje
                mensaje=""
                #datos del csv dashboard
                #separamos los datos por puntocomas
                datoDash= LineasDashboard[line].split(';')
                unit=datoDash[0]
                currentProduct=datoDash[1]
                currentSetup=datoDash[2]
                ne=datoDash[4]
                d=datoDash[5]
                t=datoDash[6]
                w=datoDash[7]
                #datos del csv SRSS
                datoSRSS=LineasSRSS[line-2].split(';')
                neSRSS=datoSRSS[10]
                dSRSS=datoSRSS[3]
                tSRSS=datoSRSS[5]
                wSRSS=datoSRSS[7]
                #comparamos los datos
                mensaje+="\tCurrentUnit\t currentProduct\t\t currentSetup\t NE\t D\t T\t W\n"
                mensaje+="\t"+str(unit)+"\t"+str(currentProduct)+"\t\t"+str(currentSetup)+"\t"+str(ne)+"\t"+str(d)+"\t"+str(t)+"\t"+str(w)+"\n\n"
                mensaje+="\tErrores de comparacion :\t\n"
                if (math.isclose(float(ne),float(neSRSS), abs_tol=0.2)) is False:
                    mensaje=mensaje+"\tNE no coincide con el SRSS. Valor del Dashboard: "+str(ne)+"\t valor del SSRS: "+str(neSRSS)+"\n"
                if (math.isclose(float(d),float(dSRSS), abs_tol=0.2)) is False:
                    mensaje=mensaje+"\tD no coincide con el SRSS. Valor del Dashboard: " +str(d)+"\t valor del SSRS: "+str(dSRSS)+"\n"
                if (math.isclose(float(t),float(tSRSS), abs_tol=0.2)) is False:
                    mensaje=mensaje+"\tT no coincide con el SRSS. Valor del Dashboard: " +str(t)+"\t valor del SRSS: "+str(tSRSS)+"\n"
                if (math.isclose(float(w),float(wSRSS), abs_tol=0.2)) is False:
                    mensaje=mensaje+"\tW no coincide con el SRSS. Valor del Dashboard:  " +str(w)+"\t valor del SSRS"+str(wSRSS)+"\n"
                #escribo el mensaje en la variable de errores si hay algun issue de comparacion
                if len(mensaje)>215:
                    errores=errores+mensaje+"\n\n"

    if len(errores)>0:
      name=convertTo.createWord(errores,"test_tUC06_M_TC01_TC1_DP_Information")
      convertTo.convertToPdf(name)
      #si hay errores, los muestro
      assert len(errores)<=0, errores


 

   
    