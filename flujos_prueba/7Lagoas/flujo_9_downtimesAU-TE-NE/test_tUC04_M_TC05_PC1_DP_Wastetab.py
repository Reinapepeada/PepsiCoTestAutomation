# Generated by Selenium IDE
import json
import os
import sys
import time
import pytest
from selenium import webdriver
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.by import By
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait

p = os.path.abspath('..')
sys.path.insert(1, p)
from utilities.ligasPlanta import LIGAPRINCIPAL


class TestTUC04_M_TC05_PC1_DP_Wastetab():
  def setup_method(self, method):
    chrome_options=webdriver.ChromeOptions()
    chrome_options.add_argument("--disable-logging")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--log-level=3")
    chrome_options.add_argument("--disable-popup-blocking")
    #desactiva certificados de seguridad
    chrome_options.add_argument('--ignore-certificate-errors')

    self.driver = webdriver.Chrome( options=chrome_options)
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_tUC04_M_TC05_PC1_DP_Wastetab(self):
    
    # Test name: test_tUC04_M_TC05_PC1_DP_Wastetab
    # 1 | open | https://09384038:ARbg95917284.@meswebgsftmexicali.azure.intra.pepsico.com/Thingworx/Runtime/index.html#master=PepsiCo_Master&mashup=MES_Dashboard&__applyThemeName=PepsiCo%20Default%20Theme&_refreshTS=1670527225809 | 
    self.driver.get(LIGAPRINCIPAL)
    # WebDriverWait(self.driver, 100).until(expected_conditions.presence_of_element_located((By.XPATH, "//div[@id=\'root_pagemashupcontainer-6_ContainedMashup-13_ContainedMashup-75_mashupcontainer-5_gridadvanced-109-bounding-box\']/div[3]")))
    time.sleep(10)
    # 2 click burger menu | click | id=burgerButton | 
    self.driver.find_element(By.XPATH, "/html/body/div[1]/div[3]/div/div[2]/div/div/div[2]/div/div[2]/div[1]/div[2]/div[1]/div[1]/div[1]/div/div[2]/div/div[3]/div/div/div[2]/div/div[2]/div[2]").click()
    time.sleep(5)
    # 3 click en dropdown 
    # self.driver.find_element(By.XPATH, "/html/body/div[1]/div[3]/div/div[2]/div/div/div[2]/div/div[2]/div[1]/div[2]/div[1]/div[1]/div[1]/div/div[2]/div/div[3]/div/div/div[2]/div/div[1]/div[1]/div/div[3]/div/div[2]/div/div/div[2]/div/div[1]/div/div[4]/ptcs-dropdown//ptcs-hbar/ptcs-list-item").click()
    self.driver.execute_script('return document.querySelector("#root_pagemashupcontainer-6_ContainedMashup-105_ptcsdropdown-100").shadowRoot.querySelector("#select > ptcs-list-item")').click()
    time.sleep(4)
    # 4 | click | papa departamento | 
    self.driver.execute_script('return document.querySelector("#root_pagemashupcontainer-6_ContainedMashup-105_ptcsdropdown-100-external-wc").shadowRoot.querySelector("#chunker > div > div > ptcs-list-item:nth-child(4) > ptcs-div")').click()
    time.sleep(5)
    # 5 | click | click en boton de packaging |
    self.driver.find_element(By.XPATH, "/html/body/div[1]/div[3]/div/div[2]/div/div/div[2]/div/div[2]/div[1]/div[2]/div[1]/div[1]/div[1]/div/div[2]/div/div[3]/div/div/div[2]/div/div[1]/div[1]/div/div[3]/div/div[2]/div/div/div[2]/div/div[3]/div/div[2]/div/div/div[3]/div/div[1]/div/div[2]/div/div/div[2]/div/div[3]/div/div/ptcs-button").click()
    time.sleep(5)
    # 6 | click | click en boton de kpi`s |
    self.driver.find_element(By.XPATH, "/html/body/div[1]/div[3]/div/div[2]/div/div/div[2]/div/div[2]/div[1]/div[2]/div[1]/div[1]/div[1]/div/div[2]/div/div[3]/div/div/div[2]/div/div[2]/div[1]/div[2]/div/div[1]/div/div[3]/div/div[3]/div/div[1]/ptcs-button").click()
    time.sleep(12)
    # 7 | click | selecciono dando click en NE |
    self.driver.execute_script('return document.querySelector("#root_pagemashupcontainer-6_navigationfunction-211-popup_ptcsbutton-1")').click()
    time.sleep(12)

    # 8 | click | click en boton de tiempo
    # self.driver.find_element(By.XPATH,"/html/body/div[1]/div[3]/div/div[2]/div/div/div[2]/div/div[2]/div[1]/div[2]/div[1]/div[1]/div[1]/div/div[2]/div/div[3]/div/div/div[2]/div/div[2]/div[1]/div[2]/div/div[1]/div/div[3]/div/div[3]/div/div[3]/ptcs-button")
    self.driver.execute_script('return document.querySelector("#root_pagemashupcontainer-6_ptcsbutton-38")').click()

    time.sleep(5)
    
    # 9 | click | click en boton de last period
    # self.driver.find_element(By.XPATH,"/html/body/div[28]/div[2]/div/div[2]/div/div/div[2]/div/div/div/ptcs-tab-set/ptcs-mb-container[1]/div/div/div[1]/div/div[11]/ptcs-button").click()
    self.driver.execute_script('return document.querySelector("#root_pagemashupcontainer-6_navigationfunction-213-popup_ptcsbutton-112")').click()

    time.sleep(8)
    # 10 | click | click en pestaña de downtime
    self.driver.execute_script('return document.querySelector("#root_pagemashupcontainer-6_ContainedMashup-13_ptcstabset-237").shadowRoot.querySelector("ptcs-tabs > ptcs-tab:nth-child(5) > ptcs-label")').click()
    time.sleep(30) #la pagina se tarda mucho en cargar esta pestaña por eso es clave esperar considerablemente
    # ----------------------
    # 11 | click | en boton de area chronological Events
    self.driver.find_element(By.XPATH,'/html/body/div[1]/div[3]/div/div[2]/div/div/div[2]/div/div[2]/div[1]/div[2]/div[1]/div[1]/div[1]/div/div[2]/div/div[3]/div/div/div[2]/div/div[2]/div[1]/div[2]/div/div[2]/div/div[2]/div/div/div[3]/div/div[2]/div/div/div[2]/div/div[2]/div[1]/div/div/ptcs-tab-set/ptcs-mb-container[5]/div/div/div/div[3]/div/div[2]/div/div/div[2]/div/div[2]/div/div[1]/div[3]/table/tbody/tr/td[3]/span').click()
    time.sleep(85)
    # 12 | busqueda | busco en la tabla si hay dark hours en AU
    errores="\n  "
    # 12.1 | defino | path de la tabla
    pathTable= '/html/body/div[1]/div[3]/div/div[2]/div/div/div[2]/div/div[2]/div[1]/div[2]/div[1]/div[1]/div[1]/div/div[2]/div/div[3]/div/div/div[2]/div/div[2]/div[1]/div[2]/div/div[2]/div/div[2]/div/div/div[3]/div/div[2]/div/div/div[2]/div/div[2]/div[1]/div/div[3]/ptcs-tab-set/ptcs-mb-container[5]/div/div/div/div[3]/div/div[2]/div/div/div[2]/div/div[1]/div/div/div/div[2]/div[3]/div/div/div/div[3]/div/div[2]/div/div/div[2]/div/div[2]/div/div/div/div[2]/div[2]/div/div/div/div[3]/div[2]/div[2]/table/tbody'
    # 12.2 | saco nro de filas y columnas | path de la fila y columna
    rows= len(self.driver.find_elements(By.XPATH, pathTable + '/tr'))
    # 12.3 | busco en la tabla si hay dark hours en AU  
    bandera= False
    for r in range(1, rows-1):
      reason2= self.driver.find_element(By.XPATH, pathTable + '/tr[' + str(r) + ']/td[6]').text
      if reason2 == 'Dark Hours-Constraint' or reason2 == 'Dark Hours - Available to run if needed':
        print('se ha encontrado dark hours en AU')
        bandera= True
        break
    if bandera == False:
      errores= errores + 'No se ha encontrado Dark Hours en AU (deberia estar)'
    
    # 13 | click | click en boton de kpi`s |
    self.driver.find_element(By.XPATH, "/html/body/div[1]/div[3]/div/div[2]/div/div/div[2]/div/div[2]/div[1]/div[2]/div[1]/div[1]/div[1]/div/div[2]/div/div[3]/div/div/div[2]/div/div[2]/div[1]/div[2]/div/div[1]/div/div[3]/div/div[3]/div/div[1]/ptcs-button").click()
    time.sleep(10)
    # 14 | click | selecciono dando click en TE |
    jsTE='document.querySelector("#root_pagemashupcontainer-6_navigationfunction-211-popup_ptcsbutton-2")'
    # self.driver.find_element(By.XPATH,'/html/body/div[24]/div[2]/div/div[2]/div/div/div[2]/div/div[2]/ptcs-button').click()
    self.driver.execute_script(f'return {jsTE}').click()
    time.sleep(15)
    bandera= False
    for r in range(1, rows-1):
      reason2= self.driver.find_element(By.XPATH, pathTable + '/tr[' + str(r) + ']/td[6]').text
      if reason2 == 'Dark Hours-Constraint' or reason2 == 'Dark Hours - Available to run if needed':
        print('se ha encontrado dark hours en AU')
        bandera= True
        break
    if bandera == True:
      errores= errores + 'Se han encontrado Dark Hours en TE (no debería haber)'
    
    # Comprobar si hay errores
    if len(errores)>5:
        name=convertTo.createWord(errores, 'TC03MPC02DPEfficiencyCapacityWasteandDowntimevalues')
        convertTo.convertToPdf(name)
        assert len(errores)<5, '\n'+errores
    else:
        assert len(errores)<5, '\n'+errores 



if __name__=='__main__':
  pytest.main()