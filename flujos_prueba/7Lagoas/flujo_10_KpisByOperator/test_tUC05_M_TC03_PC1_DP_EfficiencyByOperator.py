# Generated by Selenium IDE
import pytest
import time
import json
import math
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
import sys,os
p = os.path.abspath('..')
sys.path.insert(1, p)
from utilities.ligasPlanta import LIGAPRINCIPAL

class TestTUC05_M_TC03_PC1_DP_EfficiencyByOperator():
  def setup_method(self, method):
    chrome_options=webdriver.ChromeOptions()
    chrome_options.add_argument("--disable-logging")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--log-level=3")
    chrome_options.add_argument("--disable-popup-blocking")
    #desactiva certificados de seguridad
    chrome_options.add_argument('--ignore-certificate-errors')

    self.driver = webdriver.Chrome( options=chrome_options)
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_tUC05_M_TC03_PC1_DP_EfficiencyByOperator(self):
    # Test name: test_tUC04_M_TC05_PC1_DP_Wastetab
    # 1 | open | https://09384038:ARbg95917284.@meswebgsftmexicali.azure.intra.pepsico.com/Thingworx/Runtime/index.html#master=PepsiCo_Master&mashup=MES_Dashboard&__applyThemeName=PepsiCo%20Default%20Theme&_refreshTS=1670527225809 | 
    self.driver.get(LIGAPRINCIPAL)
    # WebDriverWait(self.driver, 100).until(expected_conditions.presence_of_element_located((By.XPATH, "//div[@id=\'root_pagemashupcontainer-6_ContainedMashup-13_ContainedMashup-75_mashupcontainer-5_gridadvanced-109-bounding-box\']/div[3]")))
    time.sleep(15)
    # 2 click burger menu | click | id=burgerButton | 
    self.driver.find_element(By.XPATH, "/html/body/div[1]/div[3]/div/div[2]/div/div/div[2]/div/div[2]/div[1]/div[2]/div[1]/div[1]/div[1]/div/div[2]/div/div[3]/div/div/div[2]/div/div[2]/div[2]").click()
    time.sleep(9)
    # 3 click en dropdown 
    self.driver.find_element(By.XPATH, "/html/body/div[1]/div[3]/div/div[2]/div/div/div[2]/div/div[2]/div[1]/div[2]/div[1]/div[1]/div[1]/div/div[2]/div/div[3]/div/div/div[2]/div/div[1]/div[1]/div/div[3]/div/div[2]/div/div/div[2]/div/div[1]/div/div[4]/ptcs-dropdown").click()
    time.sleep(6)
    # 4 | click | papa departamento | 
    self.driver.execute_script('return document.querySelector("#root_pagemashupcontainer-6_ContainedMashup-105_ptcsdropdown-100-external-wc").shadowRoot.querySelector("#chunker > div > div > ptcs-list-item:nth-child(4)")').click()
    time.sleep(8)
    # 5 | click | click en boton de kpi`s |
    self.driver.find_element(By.XPATH, "/html/body/div[1]/div[3]/div/div[2]/div/div/div[2]/div/div[2]/div[1]/div[2]/div[1]/div[1]/div[1]/div/div[2]/div/div[3]/div/div/div[2]/div/div[2]/div[1]/div[2]/div/div[1]/div/div[3]/div/div[3]/div/div[1]/ptcs-button").click()
    time.sleep(6)
    # 6 | click | selecciono dando click en NE |
    self.driver.execute_script('return document.querySelector("#root_pagemashupcontainer-6_navigationfunction-211-popup_ptcsbutton-1")').click()
    time.sleep(10)
    # ----------------------
    # 7 | click | click en el boton del tiempo |
    # self.driver.find_element(By.XPATH,'/html/body/div[1]/div[3]/div/div[2]/div/div/div[2]/div/div[2]/div[1]/div[2]/div[1]/div[1]/div[1]/div/div[2]/div/div[3]/div/div/div[2]/div/div[2]/div[1]/div[2]/div/div[1]/div/div[3]/div/div[3]/div/div[3]/ptcs-button').click()
    self.driver.execute_script('return document.querySelector("#root_pagemashupcontainer-6_ptcsbutton-38")').click()

    time.sleep(20)
    # 8 | click | boton last shift  |
    self.driver.execute_script('return document.querySelector("#root_pagemashupcontainer-6_navigationfunction-213-popup_ptcsbutton-120")').click()
    time.sleep(25)
    # 12 defino una variable que contiene los mensajes de error
    errores="\n  "

    # 13 recorro la tabla en para sumar todos los valores de la columna
    tablePath='/html/body/div[1]/div[3]/div/div[2]/div/div/div[2]/div/div[2]/div[1]/div[2]/div[1]/div[1]/div[1]/div/div[2]/div/div[3]/div/div/div[2]/div/div[2]/div[1]/div[2]/div/div[2]/div/div[2]/div/div/div[3]/div/div[2]/div/div/div[2]/div/div[2]/div[1]/div/div/ptcs-tab-set/ptcs-mb-container[1]/div/div/div/div/div/div[2]/div/div/div[2]/div/div[1]/div/div/div[3]/div/div[2]/div/div/div[2]/div/div[1]/div/div/div/div[2]/div[2]/div/div/div/div[3]/div[2]/div[2]/table/tbody'
    filas=self.driver.find_elements(By.XPATH,tablePath+'/tr')
    columnas=self.driver.find_elements(By.XPATH,tablePath+'/tr[2]/td')
    filas=len(filas)
    columnas=len(columnas)
    totalCP=0
    totalNP=0
    totalNE=0
    avgNE=0
    totalD=0
    avgD=0
    totalT=0
    avgT=0
    totalW=0
    avgW=0
    for f in range(2,filas+1):
      tubo=self.driver.find_element(By.XPATH,tablePath+'/tr['+str(f)+']/td[1]').text
      cP=self.driver.find_element(By.XPATH,tablePath+'/tr['+str(f)+']/td[3]').text
      totalCP+=float(cP)
      nP=self.driver.find_element(By.XPATH,tablePath+'/tr['+str(f)+']/td[4]').text
      totalNP+=float(nP)
      ne=self.driver.find_element(By.XPATH,tablePath+'/tr['+str(f)+']/td[5]').text
      totalNE+=float(ne)
      d=self.driver.find_element(By.XPATH,tablePath+'/tr['+str(f)+']/td[6]').text
      totalD+=float(d)
      t=self.driver.find_element(By.XPATH,tablePath+'/tr['+str(f)+']/td[7]').text
      totalT+=float(t)
      w=self.driver.find_element(By.XPATH,tablePath+'/tr['+str(f)+']/td[8]').text
      totalW+=float(w)
    avgNE=totalNE/(filas-1)
    avgD=totalD/(filas-1)
    avgT=totalT/(filas-1)
    avgW=totalW/(filas-1)
    print(avgNE,avgD,avgT,avgW) 
    # 14 | click en  navbar en boton dashboard 
    self.driver.find_element(By.XPATH, "/html/body/div[1]/div[3]/div/div[2]/div/div/div[2]/div/div[1]/div/div[2]/div/div/div/div/div/ul/li[4]/table/tbody/tr/td").click()
    time.sleep(6)
    # 15 | click | click en boton de efficiency by operator |
    self.driver.find_element(By.XPATH, "/html/body/ul[2]/li[1]").click()
    time.sleep(25)
    # 16 | click | sumo todos los valores |
    tablePath='/html/body/div[1]/div[3]/div/div[2]/div/div/div[2]/div/div[2]/div[1]/div[2]/div[1]/div[1]/div[1]/div/div[2]/div/div[3]/div/div/div[2]/div/div[3]/div/div[2]/div/div/div[3]/div/div[2]/div/div/div[2]/div/div[2]/div/div/div/ptcs-tab-set/ptcs-mb-container[1]/div/div/div/div/div/div[2]/div/div/div[2]/div/div[1]/div/div/div/div[2]/div[2]/div/div/div/div[3]/div[2]/div[2]/table/tbody'
    filas=len(self.driver.find_elements(By.XPATH,tablePath+'/tr'))
    
    totalCPByOp=0
    totalNPByOp=0
    totalNEByOp=0
    totalDByOp=0
    totalTByOp=0
    totalWByOp=0

    for f in range(2,filas+1):
      cPByOp=self.driver.find_element(By.XPATH,tablePath+'/tr['+str(f)+']/td[3]').text
      totalCPByOp+=float(cPByOp)
      nPByOp=self.driver.find_element(By.XPATH,tablePath+'/tr['+str(f)+']/td[4]').text
      totalNPByOp+=float(nPByOp)
      neByOp=self.driver.find_element(By.XPATH,tablePath+'/tr['+str(f)+']/td[5]').text
      totalNEByOp+=float(neByOp)
      dByOp=self.driver.find_element(By.XPATH,tablePath+'/tr['+str(f)+']/td[6]').text
      totalDByOp+=float(dByOp)
      tByOp=self.driver.find_element(By.XPATH,tablePath+'/tr['+str(f)+']/td[7]').text
      totalTByOp+=float(tByOp)
      wByOp=self.driver.find_element(By.XPATH,tablePath+'/tr['+str(f)+']/td[8]').text
      totalWByOp+=float(wByOp)

    print(totalCP,totalNP,totalNE,totalD,totalT,totalW)
    if (math.isclose(totalCP,totalCPByOp, abs_tol=0.5)) is False:
      errores+="\n  - El total de CP no coincide con la suma de los valores de la columna CP en by Operator"
    if (math.isclose(totalNP,totalNPByOp, abs_tol=0.5)) is False:
      errores+="\n  - El total de NP no coincide con la suma de los valores de la columna NP en by Operator"
    if (math.isclose(avgNE,totalNEByOp, abs_tol=0.5)) is False:
      errores+="\n  - El total de NE no coincide con la suma de los valores de la columna NE en by Operator"
    if (math.isclose(avgD,totalDByOp, abs_tol=0.5)) is False:
      errores+="\n  - El total de D no coincide con la suma de los valores de la columna D en by Operator"
    if (math.isclose(avgT,totalTByOp, abs_tol=0.5)) is False:
      errores+="\n  - El total de T no coincide con la suma de los valores de la columna T en by Operator"
    if (math.isclose(avgW,totalWByOp, abs_tol=0.5)) is False:
      errores+="\n  - El total de W no coincide con la suma de los valores de la columna W en by Operator"
    
    print(errores)
    # Comprobar si hay errores
    if len(errores)>5:
        name=convertTo.createWord(errores, 'TC03MPC02DPEfficiencyCapacityWasteandDowntimevalues')
        convertTo.convertToPdf(name)
        assert len(errores)<5, '\n'+errores
    else:
        assert len(errores)<5, '\n'+errores 

    

if __name__=='__main__':
  pytest.main()